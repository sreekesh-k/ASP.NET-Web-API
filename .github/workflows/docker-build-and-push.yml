name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        env:
          IMAGE_NAME: sreekesh26/itemsapi
        run: |
          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest

      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PRIVATE_KEY_PASSWORD: ${{ secrets.SSH_PRIVATE_KEY_PASSWORD }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          IMAGE_NAME: sreekesh26/itemsapi
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
          sshpass -p "$SSH_PRIVATE_KEY_PASSWORD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $SERVER_USER@$SERVER_HOST << EOF
            echo "Starting deployment process..."
            set -x  

            echo "Pulling Docker image..."
            docker pull $IMAGE_NAME:latest
            if [ $? -ne 0 ]; then echo "Error pulling image"; exit 1; fi

            echo "Stopping existing container..."
            docker stop itemsapi || true
            docker rm itemsapi || true
            if [ $? -ne 0 ]; then echo "Error stopping/removing container"; exit 1; fi

            echo "Running new Docker container..."
            docker run -d --name itemsapi -p 8080:8080 $IMAGE_NAME:latest
            if [ $? -ne 0 ]; then echo "Error running container"; exit 1; fi

            echo "Docker container deployed successfully!"
          EOF
